Стрельников Сергей П2-17
ЛЗ 6

[1]	 1) Упражнение 2.24. Какие из следующих определений (если они есть) недопустимы? Почему? Как их исправить?
		(a) int ival = 1.01; - Скомпилируется, но сотая часть отрежется. Лучше использовать double
		(b) int &rvall = 1.01; - Ссылка может ссылаться только на переменную, а не на значение. 
		(d) const int &rval3 = 1; - Ссылка может ссылаться только на переменную, а не на значение.

	 2) Упражнение 2.25. Какие из следующих присвоений (если они есть) являются недопустимыми
(с учетом предыдущих определений)? Если таковые есть, объясните, почему.
		(d) rval3 = ival; - потому что rval3 константа

	3) Упражнение 2.26. В чем разница между определениями (а) и присвоениями (Ь)?
Какие из них (если есть) недопустимы?
		(a) - недопустимо потому что ссылку надо инициализировать обьектом


	4) Что отобразит на экране следующий код?
		int i, &ri = i; i = 5; ri = 10;
		std::cout << i << " " << ri << std::endl;
		
		Вывод - 10 10;

	5) Упражнение 4.15. Укажите принципиальные различия между указателями и ссылками.

		1.Указатель может быть переназначен любое количество раз, в то время как ссылка после привязки не может быть перемещена на другую ячейку памяти.
		2. Указатели могут указывать "в никуда" (быть равными NULL), в то время как ссылка всегда указывает на определенный объект.
		3. Мы не можем получить адрес ссылки, как можете это делать с указателями.
		4. Не существует арифметики ссылок, в то время как существует арифметика указателей.	

	6) Упражнение 7.7. Объясните различие между параметрами в следующих двух объявлениях.
		void f(Т); - передается копия значения переменной
		void f(Т&); - передается адрес переменной

	7) Упражнение 7.8. Приведите пример случая, когда параметр должен быть ссылочным.
	Приведите пример случая, когда параметр не должен быть ссылочным.
		
		void swap(int &a, int &b)
		{
		a = a + b;
		b = a - b;
		a = a - b;
		}

		int more(int a, int b)
		{
		if(a > b)
			return a;
		else if(a < b)
			return b;
		
			return 0;
		}		

	8) Упражнение 7.10. Следующая функция хоть и вполне допустима, но менее полезна,
	чем могла бы быть. Выявите и устраните ограничения.
	bool test(string& s) { return s.empty(); } Написать main для аргументации своего решения

	Параметр определён как string&, следовательно, можно вызвать только объект класса string и такая запись main привела бы к ошибке
	int main()
	{
	cout <<test("test");
	}
	Исправленный код:
	bool test(const string& s) { return s.empty(); } - модифицировать параметр не нужно, поэтому лучше передать её как константную ссылку


	9) Упражнение 7.11. Когда ссылочные параметры должны быть константными?
	Какие проблемы могут возникнуть, если параметр является обычной ссылкой,
а какие — если он является константной ссылкой?

	Параментры, которые не должны быть модифицированными должны быть константными ссылками
	Обычной ссылкой нельзя передать в фунцию строковые литералы
